// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/iam-go-sdk/sdk (interfaces: ISDK)

// Package sdk is a generated GoMock package.
package sdk

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/iam-go-sdk/oauth/entity"
	dto "github.com/KyberNetwork/iam-go-sdk/permission/dto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockISDK is a mock of ISDK interface.
type MockISDK struct {
	ctrl     *gomock.Controller
	recorder *MockISDKMockRecorder
}

// MockISDKMockRecorder is the mock recorder for MockISDK.
type MockISDKMockRecorder struct {
	mock *MockISDK
}

// NewMockISDK creates a new mock instance.
func NewMockISDK(ctrl *gomock.Controller) *MockISDK {
	mock := &MockISDK{ctrl: ctrl}
	mock.recorder = &MockISDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISDK) EXPECT() *MockISDKMockRecorder {
	return m.recorder
}

// CheckConsumerPermission mocks base method.
func (m *MockISDK) CheckConsumerPermission(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConsumerPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConsumerPermission indicates an expected call of CheckConsumerPermission.
func (mr *MockISDKMockRecorder) CheckConsumerPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConsumerPermission", reflect.TypeOf((*MockISDK)(nil).CheckConsumerPermission), arg0, arg1, arg2)
}

// CheckEditorPermission mocks base method.
func (m *MockISDK) CheckEditorPermission(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEditorPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEditorPermission indicates an expected call of CheckEditorPermission.
func (mr *MockISDKMockRecorder) CheckEditorPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEditorPermission", reflect.TypeOf((*MockISDK)(nil).CheckEditorPermission), arg0, arg1, arg2)
}

// CheckOwnerPermission mocks base method.
func (m *MockISDK) CheckOwnerPermission(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOwnerPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOwnerPermission indicates an expected call of CheckOwnerPermission.
func (mr *MockISDKMockRecorder) CheckOwnerPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOwnerPermission", reflect.TypeOf((*MockISDK)(nil).CheckOwnerPermission), arg0, arg1, arg2)
}

// CheckPermission mocks base method.
func (m *MockISDK) CheckPermission(arg0, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockISDKMockRecorder) CheckPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockISDK)(nil).CheckPermission), arg0, arg1, arg2, arg3)
}

// CheckPermissionAllOfObjects mocks base method.
func (m *MockISDK) CheckPermissionAllOfObjects(arg0 string, arg1 []string, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermissionAllOfObjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermissionAllOfObjects indicates an expected call of CheckPermissionAllOfObjects.
func (mr *MockISDKMockRecorder) CheckPermissionAllOfObjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermissionAllOfObjects", reflect.TypeOf((*MockISDK)(nil).CheckPermissionAllOfObjects), arg0, arg1, arg2, arg3)
}

// CheckPermissionOneOfObjects mocks base method.
func (m *MockISDK) CheckPermissionOneOfObjects(arg0 string, arg1 []string, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermissionOneOfObjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermissionOneOfObjects indicates an expected call of CheckPermissionOneOfObjects.
func (mr *MockISDKMockRecorder) CheckPermissionOneOfObjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermissionOneOfObjects", reflect.TypeOf((*MockISDK)(nil).CheckPermissionOneOfObjects), arg0, arg1, arg2, arg3)
}

// CheckViewerPermission mocks base method.
func (m *MockISDK) CheckViewerPermission(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckViewerPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckViewerPermission indicates an expected call of CheckViewerPermission.
func (mr *MockISDKMockRecorder) CheckViewerPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckViewerPermission", reflect.TypeOf((*MockISDK)(nil).CheckViewerPermission), arg0, arg1, arg2)
}

// CreateConsumerPermission mocks base method.
func (m *MockISDK) CreateConsumerPermission(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumerPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumerPermission indicates an expected call of CreateConsumerPermission.
func (mr *MockISDKMockRecorder) CreateConsumerPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumerPermission", reflect.TypeOf((*MockISDK)(nil).CreateConsumerPermission), arg0, arg1, arg2, arg3)
}

// CreateConsumerPermissionMultipleObjects mocks base method.
func (m *MockISDK) CreateConsumerPermissionMultipleObjects(arg0 string, arg1 []string, arg2, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumerPermissionMultipleObjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumerPermissionMultipleObjects indicates an expected call of CreateConsumerPermissionMultipleObjects.
func (mr *MockISDKMockRecorder) CreateConsumerPermissionMultipleObjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumerPermissionMultipleObjects", reflect.TypeOf((*MockISDK)(nil).CreateConsumerPermissionMultipleObjects), arg0, arg1, arg2, arg3)
}

// CreateEditorPermission mocks base method.
func (m *MockISDK) CreateEditorPermission(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEditorPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEditorPermission indicates an expected call of CreateEditorPermission.
func (mr *MockISDKMockRecorder) CreateEditorPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEditorPermission", reflect.TypeOf((*MockISDK)(nil).CreateEditorPermission), arg0, arg1, arg2, arg3)
}

// CreateEditorPermissionMultipleObjects mocks base method.
func (m *MockISDK) CreateEditorPermissionMultipleObjects(arg0 string, arg1 []string, arg2, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEditorPermissionMultipleObjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEditorPermissionMultipleObjects indicates an expected call of CreateEditorPermissionMultipleObjects.
func (mr *MockISDKMockRecorder) CreateEditorPermissionMultipleObjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEditorPermissionMultipleObjects", reflect.TypeOf((*MockISDK)(nil).CreateEditorPermissionMultipleObjects), arg0, arg1, arg2, arg3)
}

// CreateOwnerPermission mocks base method.
func (m *MockISDK) CreateOwnerPermission(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOwnerPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOwnerPermission indicates an expected call of CreateOwnerPermission.
func (mr *MockISDKMockRecorder) CreateOwnerPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOwnerPermission", reflect.TypeOf((*MockISDK)(nil).CreateOwnerPermission), arg0, arg1, arg2, arg3)
}

// CreateOwnerPermissionMultipleObjects mocks base method.
func (m *MockISDK) CreateOwnerPermissionMultipleObjects(arg0 string, arg1 []string, arg2, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOwnerPermissionMultipleObjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOwnerPermissionMultipleObjects indicates an expected call of CreateOwnerPermissionMultipleObjects.
func (mr *MockISDKMockRecorder) CreateOwnerPermissionMultipleObjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOwnerPermissionMultipleObjects", reflect.TypeOf((*MockISDK)(nil).CreateOwnerPermissionMultipleObjects), arg0, arg1, arg2, arg3)
}

// CreatePermission mocks base method.
func (m *MockISDK) CreatePermission(arg0 *dto.CreatePermissionRequest, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockISDKMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockISDK)(nil).CreatePermission), arg0, arg1)
}

// CreatePermissionMultipleObjects mocks base method.
func (m *MockISDK) CreatePermissionMultipleObjects(arg0 *dto.CreatePermissionMultipleObjectsRequest, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionMultipleObjects", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionMultipleObjects indicates an expected call of CreatePermissionMultipleObjects.
func (mr *MockISDKMockRecorder) CreatePermissionMultipleObjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionMultipleObjects", reflect.TypeOf((*MockISDK)(nil).CreatePermissionMultipleObjects), arg0, arg1)
}

// CreateViewerPermission mocks base method.
func (m *MockISDK) CreateViewerPermission(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateViewerPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateViewerPermission indicates an expected call of CreateViewerPermission.
func (mr *MockISDKMockRecorder) CreateViewerPermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateViewerPermission", reflect.TypeOf((*MockISDK)(nil).CreateViewerPermission), arg0, arg1, arg2, arg3)
}

// CreateViewerPermissionMultipleObjects mocks base method.
func (m *MockISDK) CreateViewerPermissionMultipleObjects(arg0 string, arg1 []string, arg2, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateViewerPermissionMultipleObjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateViewerPermissionMultipleObjects indicates an expected call of CreateViewerPermissionMultipleObjects.
func (mr *MockISDKMockRecorder) CreateViewerPermissionMultipleObjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateViewerPermissionMultipleObjects", reflect.TypeOf((*MockISDK)(nil).CreateViewerPermissionMultipleObjects), arg0, arg1, arg2, arg3)
}

// GRPCInterceptor mocks base method.
func (m *MockISDK) GRPCInterceptor() func(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCInterceptor")
	ret0, _ := ret[0].(func(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error))
	return ret0
}

// GRPCInterceptor indicates an expected call of GRPCInterceptor.
func (mr *MockISDKMockRecorder) GRPCInterceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCInterceptor", reflect.TypeOf((*MockISDK)(nil).GRPCInterceptor))
}

// GetAccessToken mocks base method.
func (m *MockISDK) GetAccessToken(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockISDKMockRecorder) GetAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockISDK)(nil).GetAccessToken), arg0, arg1)
}

// GetBearerAccessToken mocks base method.
func (m *MockISDK) GetBearerAccessToken(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBearerAccessToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBearerAccessToken indicates an expected call of GetBearerAccessToken.
func (mr *MockISDKMockRecorder) GetBearerAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBearerAccessToken", reflect.TypeOf((*MockISDK)(nil).GetBearerAccessToken), arg0, arg1)
}

// ParseBearerJWT mocks base method.
func (m *MockISDK) ParseBearerJWT(arg0 string) (*entity.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBearerJWT", arg0)
	ret0, _ := ret[0].(*entity.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseBearerJWT indicates an expected call of ParseBearerJWT.
func (mr *MockISDKMockRecorder) ParseBearerJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBearerJWT", reflect.TypeOf((*MockISDK)(nil).ParseBearerJWT), arg0)
}

// ParseJWT mocks base method.
func (m *MockISDK) ParseJWT(arg0 string) (*entity.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", arg0)
	ret0, _ := ret[0].(*entity.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockISDKMockRecorder) ParseJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockISDK)(nil).ParseJWT), arg0)
}
